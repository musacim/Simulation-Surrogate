#  source /lib/openfoam/openfoam2406/etc/bashrc
#  source ~/my_venv/bin/activate















import numpy as np

import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

#---------------------------------------------------------
# Example data:
# Columns: lid_velocity, viscosity, lid_time_step, velocity_magnitude, pressure
# The user provided data for ~55 points. For demonstration, we'll assume this is our entire dataset.
data = np.array([
[1.0,0.001004,1,0.17948244249023537,0.9865423699134871],
[1.03,0.001011,2,0.18518003385357598,0.9856104471057734],
[1.06,0.001044,3,0.19199082696375216,0.9845944356051849],
[1.11,0.001061,4,0.20079052004073733,0.9830522392472938],
[1.11,0.001087,5,0.20116896636663165,0.9831520207187775],
[1.17,0.001097,6,0.21178263499380687,0.9811010411289841],
[1.16,0.001126,7,0.2116313127792511,0.9813389244347874],
[1.22,0.001149,8,0.22338635655027275,0.9790240103273571],
[1.22,0.00116,9,0.2226562311074561,0.9792668974245771],
[1.28,0.00117,10,0.23404263799221117,0.9767782194243395],
[1.29,0.00119,11,0.23542600800216026,0.9766252010728207],
[1.32,0.001225,12,0.2411595668331039,0.9755639284621155],
[1.37,0.001235,13,0.25157122205257165,0.9730774998956638],
[1.39,0.001265,14,0.255472388972416,0.9723744264665465],
[1.43,0.001274,15,0.2637288486200307,0.9702753763261618],
[1.44,0.0013,16,0.26484791857864975,0.9702529822607489],
[1.47,0.001321,17,0.27119183989709816,0.9687318772036432],
[1.52,0.00134,18,0.2796951590382038,0.9665430774951745],
[1.52,0.001365,19,0.28131790290052194,0.9663609691580947],
[1.57,0.001388,20,0.2908632754394887,0.9638127267898321],
[1.58,0.001396,21,0.2925004040031886,0.9634131692509061],
[1.62,0.00142,22,0.29953154092126083,0.961549513657694],
[1.66,0.001449,23,0.30771657587762624,0.9593390005320468],
[1.71,0.001464,24,0.31689699089652573,0.9565375279012244],
[1.73,0.001482,25,0.3220004127620314,0.9550668339293117],
[2.09,0.0005108,26,0.3667628474119631,0.9204969142478443],
[2.2,0.0005326,27,0.3899280976398552,0.9099565919440221],
[2.31,0.0005324,28,0.41284620754010687,0.8986526722111753],
[2.42,0.0005314,29,0.4336354339330637,0.8878307980391597],
[2.51,0.0005452,30,0.4521029634896449,0.8779014972978878],
[2.59,0.0005783,31,0.4711223906129933,0.867375386869196],
[2.72,0.0005649,32,0.49560946585452953,0.8526928017289928],
[2.78,0.000578,33,0.5094139900433959,0.8442143735946909],
[2.87,0.0006012,34,0.5289830635340216,0.8317811098794814],
[3.0,0.0005923,35,0.5520242297551491,0.8163328188411273],
[3.11,0.0006141,36,0.5769195364100215,0.7989812170761397],
[3.23,0.0006186,37,0.5990192580868944,0.7828811440158966],
[3.29,0.0006444,38,0.6147382146524891,0.7710749421604626],
[3.4,0.0006519,39,0.6364999596083915,0.7541587303298728],
[3.49,0.0006322,40,0.6513670177846353,0.7423275615742989],
[3.56,0.0002718,41,0.5429145520524815,0.83709388195151],
[3.65,0.000298,42,0.5735169063035052,0.8155334368910132],
[3.7,0.0002744,43,0.5650578499360212,0.8241209594972556],
[3.85,0.0002442,44,0.5607804756902646,0.8319652116917214],
[3.95,0.000252,45,0.5799440562193854,0.81956795056076],
[4.01,0.0002454,46,0.5814886180512926,0.8201544570680473],
[4.02,0.000249,47,0.5864412720791681,0.8165349224613865],
[4.09,0.0002357,48,0.5823215567992643,0.8219632424569486],
[4.2,0.0001999,49,0.5549097373870828,0.8454822391494983],
[4.3,0.0001891,50,0.5517561651196066,0.8500435544083478],
[4.4,0.0001718,51,0.5373961167913875,0.8616870242244363],
[4.49,0.000161,52,0.5301504620326924,0.8679239096974202],
[4.57,0.0001724,53,0.5558887869835906,0.8529908564050322],
[4.61,0.0001545,54,0.5309950543821235,0.869541917595986],
[4.66,0.0001689,55,0.5585399765166964,0.8528374904987397]
])

#---------------------------------------------------------
# Extract features and targets
# Inputs: lid_velocity, viscosity
# Output targets: velocity_magnitude, pressure
X = data[:, [0,1]]   # lid_velocity, viscosity
y = data[:, [3,4]]   # velocity_magnitude, pressure

n_data = len(X)
print("Number of data points:", n_data)

#---------------------------------------------------------
# Plot the input features to visualize data drift
plt.figure(figsize=(10,4))
plt.plot(X[:,0], label='lid_velocity')
plt.plot(X[:,1], label='viscosity')
plt.title('Input Features Over Index (Data Drift Visualization)')
plt.xlabel('Data Point Index')
plt.ylabel('Value')
plt.legend()
plt.grid(True)
plt.show()

#---------------------------------------------------------
# Train surrogate model on the first 20 points
train_size = 20
train_X = X[:train_size]
train_y = y[:train_size]

model = LinearRegression()
model.fit(train_X, train_y)

#---------------------------------------------------------
# Test the model on segments of data after training
# For example, test on indices [20:40], [40:60], [60:80], etc.
segment_size = 20
test_indices = range(train_size, n_data, segment_size)

mse_values = []
segments = []
for start_idx in test_indices:
    end_idx = start_idx + segment_size
    if end_idx > n_data:
        end_idx = n_data
    if start_idx < end_idx:
        test_X = X[start_idx:end_idx]
        test_y = y[start_idx:end_idx]
        pred_y = model.predict(test_X)
        mse = mean_squared_error(test_y, pred_y)
        mse_values.append(mse)
        segments.append(f"{start_idx+1}-{end_idx}")  # 1-based indexing in label

#---------------------------------------------------------
# Plot how the accuracy (MSE) changes over these segments
plt.figure(figsize=(10,4))
plt.plot(mse_values, marker='o')
plt.title('Model Accuracy on Subsequent Segments')
plt.xlabel('Test Segment (index in the order tested)')
plt.ylabel('MSE (Mean Squared Error)')
plt.grid(True)
# Customize x-ticks to show segments range
plt.xticks(range(len(segments)), segments, rotation=45)
plt.tight_layout()
plt.show()
